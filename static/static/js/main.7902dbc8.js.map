{"version":3,"file":"static/js/main.7902dbc8.js","mappings":"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","sources":["services/api.tsx","context/FolderContext.tsx","hooks/useFolders.ts","utils/imageCacheUtils.ts","hooks/useImageCache.ts","components/CacheManager.tsx","hooks/useMobile.ts","components/MenuSection.tsx","components/ThumbnailSlideshow.tsx","components/FolderCard.tsx","components/MobileNavigation.tsx","components/DeleteDialog.tsx","components/TagDialog.tsx","components/PhotoSwipeGallery.tsx","context/UIContext.tsx","hooks/useUI.ts","components/RandomPhotoView.tsx","hooks/useInfiniteScroll.ts","pages/FolderList.tsx","pages/FolderDetail.tsx","pages/TagView.tsx","components/ApiDocs.tsx","pages/ApiDocs.tsx","Router.tsx","App.tsx","reportWebVitals.ts","index.tsx","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/create fake namespace object","../webpack/runtime/define property getters","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/jsonp chunk loading","../webpack/startup"],"sourcesContent":["import axios, { AxiosError } from 'axios'\nimport DOMPurify from 'dompurify'\nimport {\n    Folder,\n    JsonFilePhoto,\n    JsonResponse,\n    JsonResponseCancelTask,\n    JsonResponseIndex,\n    JsonRootResponse,\n} from '../types/gallery'\n\n// Sanitization utilities\nconst sanitize = {\n    // Basic string sanitization\n    string: (value: string): string => {\n        return DOMPurify.sanitize(value)\n    },\n\n    // Sanitize folder name (more restrictive)\n    folderName: (name: string): string => {\n        // First apply basic sanitization\n        const sanitized = DOMPurify.sanitize(name)\n        // Additionally remove any characters that shouldn't be in folder names\n        return sanitized.replace(/[^a-zA-Z0-9_\\-. ]/g, '')\n    },\n\n    // Sanitize array of strings\n    stringArray: (arr: string[]): string[] => {\n        return arr.map((item) => DOMPurify.sanitize(item))\n    },\n\n    // Safe query params\n    queryParams: (params: Record<string, any>): Record<string, any> => {\n        const sanitizedParams: Record<string, any> = {}\n\n        for (const key in params) {\n            if (params[key] === undefined) continue\n\n            if (typeof params[key] === 'string') {\n                sanitizedParams[key] = DOMPurify.sanitize(params[key])\n            } else {\n                sanitizedParams[key] = params[key]\n            }\n        }\n\n        return sanitizedParams\n    },\n}\n\n// Create an axios instance with default config\nconst apiClient = axios.create({\n    baseURL: 'http://192.168.1.27:8000/',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    timeout: 10000, // 10 seconds timeout\n})\n\n// Add response interceptor for error handling\napiClient.interceptors.response.use(\n    // Success handler\n    (response) => response,\n    // Error handler\n    (error: AxiosError) => {\n        // Log the error but don't expose sensitive information to users\n        console.error('API request failed:', {\n            url: error.config?.url,\n            method: error.config?.method,\n            status: error.response?.status,\n            message: error.message,\n        })\n\n        // You can handle specific status codes\n        if (error.response) {\n            switch (error.response.status) {\n                case 400:\n                    return Promise.reject(\n                        new Error(\n                            'Invalid request. Please check your input and try again.'\n                        )\n                    )\n                case 401:\n                    return Promise.reject(\n                        new Error('You need to log in to perform this action.')\n                    )\n                case 403:\n                    return Promise.reject(\n                        new Error(\n                            \"You don't have permission to perform this action.\"\n                        )\n                    )\n                case 404:\n                    return Promise.reject(\n                        new Error('The requested resource was not found.')\n                    )\n                case 429:\n                    return Promise.reject(\n                        new Error('Too many requests. Please try again later.')\n                    )\n                case 500:\n                case 502:\n                case 503:\n                case 504:\n                    return Promise.reject(\n                        new Error('Server error. Please try again later.')\n                    )\n                default:\n                    return Promise.reject(\n                        new Error(\n                            'An unexpected error occurred. Please try again later.'\n                        )\n                    )\n            }\n        }\n\n        // Network errors\n        if (error.code === 'ECONNABORTED') {\n            return Promise.reject(\n                new Error(\n                    'Request timeout. Please check your connection and try again.'\n                )\n            )\n        }\n\n        if (!navigator.onLine) {\n            return Promise.reject(\n                new Error(\n                    'You are offline. Please check your internet connection.'\n                )\n            )\n        }\n\n        return Promise.reject(\n            new Error(\n                'An error occurred while connecting to the server. Please try again later.'\n            )\n        )\n    }\n)\n\n// API methods\nexport const api = {\n    // Folder-related API calls\n    folders: {\n        // Get all roots folders\n        getRoots: async (): Promise<JsonRootResponse[]> => {\n            const response = await apiClient.get('/folders/roots')\n            return response.data\n        },\n\n        // Get all folders\n        getAll: async (\n            page: number = 1,\n            perPage: number = 15,\n            root: string,\n            searchBy?: string\n        ): Promise<Folder[]> => {\n            const sanitizedRoot = root ? sanitize.folderName(root) : undefined\n            const sanitizedSearchBy = searchBy\n                ? sanitize.string(searchBy)\n                : undefined\n\n            const params = sanitize.queryParams({\n                root: sanitizedRoot,\n                per_page: perPage,\n                page,\n                searchby: sanitizedSearchBy,\n            })\n\n            const response = await apiClient.get('/folders/json', { params })\n            return response.data\n        },\n\n        // Get folder by name\n        getByName: async (folderName: string): Promise<Folder | null> => {\n            const sanitizedName = sanitize.folderName(folderName)\n            const response = await apiClient.get(\n                `/folders/json/name/${sanitizedName}`\n            )\n            return response.data[0] ? response.data[0] : null\n        },\n\n        // Delete album\n        delete: async (folderName: string): Promise<void> => {\n            const sanitizedName = sanitize.folderName(folderName)\n            const response = await apiClient.post(`/folders/delete`, {\n                folder_name: sanitizedName,\n            })\n            if (response.data) {\n                if (response.data.rows !== 1) {\n                    throw new Error('Error while deleting folder')\n                }\n            }\n        },\n\n        // Update album tags\n        updateTags: async (\n            folderName: string,\n            tags: string[]\n        ): Promise<string[]> => {\n            const sanitizedName = sanitize.folderName(folderName)\n            const sanitizedTags = sanitize.stringArray(tags)\n\n            const response = await apiClient.post(`/tags/assign/folder`, {\n                tags: sanitizedTags,\n                folder_name: sanitizedName,\n            })\n            return response.data.tags ? response.data.tags : []\n        },\n    },\n\n    // Photo-related API calls\n    photos: {\n        // Get photos by album ID\n        getAllByFolder: async (\n            folderName: string,\n            perPage: number = 50,\n            page: number = 1\n        ): Promise<JsonResponse<JsonFilePhoto[]>> => {\n            const sanitizedName = sanitize.folderName(folderName)\n\n            const params = sanitize.queryParams({\n                folder: sanitizedName,\n                per_page: perPage,\n                page: page,\n            })\n\n            const response = await apiClient.get(`/files/json`, { params })\n            return response.data\n        },\n\n        // Get random photos by tag\n        getRandomByTag: async (\n            tag: string,\n            size: number,\n            equal?: boolean\n        ): Promise<JsonResponse<JsonFilePhoto[]>> => {\n            let params = {}\n            if (tag) {\n                const sanitizedTag = sanitize.folderName(tag)\n                params = {\n                    tag: sanitizedTag,\n                    equal: equal,\n                    size: size,\n                }\n            }\n\n            const response = await apiClient.get('/files/random/json', {\n                params,\n            })\n\n            return response.data\n        },\n\n        // Get random photo from album\n        getRandomByFolder: async (\n            folderName: string,\n            size: number = 200\n        ): Promise<JsonResponse<JsonFilePhoto[]>> => {\n            const sanitizedName = sanitize.folderName(folderName)\n\n            const params = sanitize.queryParams({\n                size,\n                folder: sanitizedName,\n            })\n\n            const response = await apiClient.get(`/files/random/json`, {\n                params,\n            })\n            return response.data\n        },\n\n        // Update photo tags\n        updateTags: async (\n            imageHash: string,\n            tags: string[]\n        ): Promise<string[]> => {\n            const sanitizedHash = sanitize.string(imageHash)\n            const sanitizedTags = sanitize.stringArray(tags)\n\n            const response = await apiClient.post(`/tags/assign`, {\n                tags: sanitizedTags,\n                image_hash: sanitizedHash,\n            })\n            return response.data.tags ? response.data.tags : []\n        },\n    },\n\n    // Tag-related API calls\n    tags: {\n        // Get all tags\n        getAll: async (folderName?: string): Promise<string[]> => {\n            let params = {}\n            if (folderName) {\n                const sanitizedName = sanitize.folderName(folderName)\n                params = { folder: sanitizedName }\n            }\n\n            const response = await apiClient.get('/tags', { params })\n            return response.data\n        },\n    },\n\n    // Indexation API call\n    indexation: {\n        // Trigger photo indexation\n        indexPhotos: async (): Promise<JsonResponseIndex> => {\n            const response = await apiClient.get('/files/task/index')\n            return response.data\n        },\n        cancelIndexTask: async (): Promise<JsonResponseCancelTask> => {\n            const response = await apiClient.get('/files/task/cancel')\n            return response.data\n        },\n    },\n}\n\n// Export the API client for direct use when needed\nexport default apiClient\n","import React, {\n    createContext,\n    ReactNode,\n    useCallback,\n    useEffect,\n    useState,\n    useRef,\n} from 'react'\nimport { Folder, JsonRootResponse } from '../types/gallery'\nimport { api } from '../services/api'\nimport { Location, useLocation, useNavigate } from 'react-router-dom'\n\ninterface FolderContextType {\n    folders: Folder[]\n    roots: JsonRootResponse[]\n    tags: string[]\n    filteredFolders: Folder[]\n    loading: boolean\n    searchQuery: string\n    selectedRoot: string | null\n    setSearchQuery: (query: string) => void\n    setSelectedRoot: (rootName: string) => void\n    refreshFolders: () => Promise<void>\n    updateFolderTags: (folderTitle: string, tags: string[]) => Promise<void>\n    deleteFolder: (folderTitle: string) => Promise<void>\n    isIndexing: boolean\n    startIndexation: () => Promise<void>\n    cancelIndexation: () => Promise<void> // New function to cancel indexation\n    hasMore: boolean\n    loadMoreFolders: () => void\n    page: number\n}\n\nexport const FolderContext = createContext<FolderContextType>(\n    {} as FolderContextType\n)\n\n// Helper function to update search params without navigation\nconst getUpdatedSearchParams = (\n    location: Location,\n    query: string,\n    root: string | null\n): string => {\n    const params = new URLSearchParams(location.search)\n    if (query) {\n        params.set('searchBy', query)\n    } else {\n        params.delete('searchBy')\n    }\n    if (root) {\n        params.set('root', root)\n    } else {\n        params.delete('root')\n    }\n    return params.toString()\n}\n\nexport const FolderProvider: React.FC<{ children: ReactNode }> = ({\n    children,\n}) => {\n    const [folders, setFolders] = useState<Folder[]>([])\n    const [roots, setFolderRoots] = useState<JsonRootResponse[]>([])\n    const [tags, setTags] = useState<string[]>([])\n    const [filteredFolders, setFilteredFolders] = useState<Folder[]>([])\n    const [loading, setLoading] = useState<boolean>(true)\n    const [searchQuery, setSearchQuery] = useState<string>('')\n    const [selectedRoot, setSelectedRoot] = useState<string>('files')\n    const [isIndexing, setIsIndexing] = useState<boolean>(false)\n    const [page, setPage] = useState<number>(1)\n    const [hasMore, setHasMore] = useState<boolean>(true)\n    const checkIntervalRef = useRef<NodeJS.Timeout | null>(null)\n    const FOLDERS_PER_PAGE = 8\n    const location = useLocation()\n    const navigate = useNavigate()\n\n    // Update URL with search parameters\n    const updateSearchParams = useCallback(\n        (query: string, root: string | null) => {\n            const search = getUpdatedSearchParams(location, query, root)\n            const newUrl = `${location.pathname}${search ? `?${search}` : ''}`\n            navigate(newUrl, { replace: true })\n        },\n        [location, navigate]\n    )\n\n    // Function to check indexation status\n    const checkIndexationStatus = useCallback(async () => {\n        try {\n            const data = await api.indexation.indexPhotos()\n            setIsIndexing(data.task_running)\n\n            if (!data.task_running && checkIntervalRef.current) {\n                clearInterval(checkIntervalRef.current)\n                checkIntervalRef.current = null\n                await refreshFolders()\n            }\n        } catch (err) {\n            console.error('Failed to check indexation status:', err)\n        }\n    }, [])\n\n    // Clear interval on unmount\n    useEffect(() => {\n        return () => {\n            if (checkIntervalRef.current) {\n                clearInterval(checkIntervalRef.current)\n                checkIntervalRef.current = null\n            }\n        }\n    }, [])\n\n    // Fetch folders with pagination and search\n    const fetchFolders = useCallback(\n        async (currentPage: number, root: string | null, query: string) => {\n            setLoading(true)\n            try {\n                // Here you'll need to modify your API call to include search parameters\n                const data = await api.folders.getAll(\n                    currentPage,\n                    FOLDERS_PER_PAGE,\n                    root || '',\n                    query\n                )\n\n                // Check if we have more folders to load\n                const hasMoreFolders = data.length === FOLDERS_PER_PAGE\n                setHasMore(hasMoreFolders)\n\n                return data\n            } catch (err) {\n                console.error('Failed to fetch folders:', err)\n                return []\n            } finally {\n                setLoading(false)\n            }\n        },\n        []\n    )\n\n    // Refresh folders (used for initial load or reset)\n    const refreshFolders = useCallback(async () => {\n        setPage(1)\n        const newFolders = await fetchFolders(1, selectedRoot, searchQuery)\n        setFolders(newFolders)\n        setFilteredFolders(newFolders)\n    }, [fetchFolders, selectedRoot, searchQuery])\n\n    // Load more folders function\n    const loadMoreFolders = useCallback(async () => {\n        if (!hasMore || loading) return\n\n        const nextPage = page + 1\n        const newFolders = await fetchFolders(\n            nextPage,\n            selectedRoot,\n            searchQuery\n        )\n\n        if (newFolders.length > 0) {\n            setFolders((prev) => [...prev, ...newFolders])\n            setFilteredFolders((prev) => [...prev, ...newFolders])\n            setPage(nextPage)\n        }\n    }, [fetchFolders, hasMore, loading, page, selectedRoot, searchQuery])\n\n    // Handle search query and root selection changes\n    useEffect(() => {\n        const params = new URLSearchParams(location.search)\n        const rootParam = params.get('root')\n        const searchParam = params.get('searchBy')\n\n        // Only update if values are different\n        if (rootParam !== selectedRoot) {\n            setSelectedRoot(rootParam ? selectedRoot : 'files')\n        }\n        if (searchParam !== searchQuery) {\n            setSearchQuery(searchParam || '')\n        }\n\n        // Reset and refresh folders when search params change\n        setPage(1)\n        refreshFolders()\n    }, [location.search])\n\n    // Fetch roots\n    useEffect(() => {\n        const fetchRoots = async () => {\n            try {\n                const data = await api.folders.getRoots()\n                setFolderRoots(data)\n            } catch (err) {\n                console.error('Failed to fetch roots:', err)\n            }\n        }\n\n        fetchRoots()\n    }, [])\n\n    // Fetch tags\n    useEffect(() => {\n        const fetchTags = async () => {\n            try {\n                const data = await api.tags.getAll()\n                setTags(data)\n            } catch (err) {\n                console.error('Failed to fetch tags:', err)\n            }\n        }\n\n        fetchTags()\n    }, [])\n\n    // Update folder tags\n    const updateFolderTags = useCallback(\n        async (folderTitle: string, tags: string[]) => {\n            try {\n                const result = await api.folders.updateTags(folderTitle, tags)\n\n                setFolders((prevFolders) =>\n                    prevFolders.map((folder) =>\n                        folder.title === folderTitle\n                            ? { ...folder, tags: result }\n                            : folder\n                    )\n                )\n                setFilteredFolders((prevFolders) =>\n                    prevFolders.map((folder) =>\n                        folder.title === folderTitle\n                            ? { ...folder, tags: result }\n                            : folder\n                    )\n                )\n            } catch (err) {\n                console.error('Failed to update tags:', err)\n                throw err\n            }\n        },\n        []\n    )\n\n    // Delete folder\n    const deleteFolder = useCallback(async (folderTitle: string) => {\n        try {\n            await api.folders.delete(folderTitle)\n            setFolders((prevFolders) =>\n                prevFolders.filter((folder) => folder.title !== folderTitle)\n            )\n            setFilteredFolders((prevFolders) =>\n                prevFolders.filter((folder) => folder.title !== folderTitle)\n            )\n        } catch (err) {\n            console.error(`Failed to delete folder ${folderTitle}:`, err)\n            throw err\n        }\n    }, [])\n\n    // Start indexation\n    const startIndexation = useCallback(async () => {\n        // Clear any existing interval\n        if (checkIntervalRef.current) {\n            clearInterval(checkIntervalRef.current)\n            checkIntervalRef.current = null\n        }\n\n        setIsIndexing(true)\n        try {\n            const data = await api.indexation.indexPhotos()\n            if (!data.task_running) {\n                // Set up interval to check status every 30 seconds\n                checkIntervalRef.current = setInterval(\n                    checkIndexationStatus,\n                    30000\n                )\n                await refreshFolders()\n            }\n            await new Promise((r) => setTimeout(r, 2000))\n        } catch (err) {\n            console.error('Indexation failed:', err)\n            setIsIndexing(false)\n            throw err\n        }\n    }, [refreshFolders, checkIndexationStatus])\n\n    // Cancel indexation\n    const cancelIndexation = useCallback(async () => {\n        try {\n            // Using the correct API endpoint to cancel the indexation task\n            const response = await api.indexation.cancelIndexTask()\n\n            // Clear the check interval\n            if (checkIntervalRef.current) {\n                clearInterval(checkIntervalRef.current)\n                checkIntervalRef.current = null\n            }\n\n            if (response.status === 'success') {\n                setIsIndexing(false)\n                await refreshFolders()\n            }\n        } catch (err) {\n            console.error('Failed to cancel indexation:', err)\n            throw err\n        }\n    }, [refreshFolders])\n\n    // Custom setSearchQuery that updates URL\n    const handleSetSearchQuery = useCallback(\n        (query: string) => {\n            setSearchQuery(query)\n            updateSearchParams(query, selectedRoot)\n        },\n        [selectedRoot, updateSearchParams]\n    )\n\n    // Custom setSelectedRoot that updates URL\n    const handleSetSelectedRoot = useCallback(\n        (root: string) => {\n            setSelectedRoot(root)\n            updateSearchParams(searchQuery, root)\n        },\n        [searchQuery, updateSearchParams]\n    )\n\n    return (\n        <FolderContext.Provider\n            value={{\n                folders,\n                roots,\n                tags,\n                filteredFolders,\n                loading,\n                searchQuery,\n                selectedRoot,\n                setSearchQuery: handleSetSearchQuery,\n                setSelectedRoot: handleSetSelectedRoot,\n                refreshFolders,\n                updateFolderTags,\n                deleteFolder,\n                isIndexing,\n                startIndexation,\n                cancelIndexation, // Add the new cancelIndexation function\n                hasMore,\n                loadMoreFolders,\n                page,\n            }}\n        >\n            {children}\n        </FolderContext.Provider>\n    )\n}\n","// src-ui/src/hooks/useAlbums.ts\nimport { useContext } from 'react'\nimport { FolderContext } from '../context/FolderContext'\n\nexport const useFolders = () => {\n    return useContext(FolderContext)\n}\n","// Define types for our cache\ninterface CachedImage {\n    url: string\n    timestamp: number\n    width: number\n    height: number\n}\n\ninterface ImageCache {\n    [key: string]: CachedImage\n}\n\n// Maximum number of entries to store in the cache\nconst MAX_CACHE_SIZE = 2000\n\n// How long to keep images in cache (7 days in milliseconds)\nconst CACHE_EXPIRY_TIME = 7 * 24 * 60 * 60 * 1000\n\n// Base URL for the API (should be moved to environment variables in production)\nconst API_BASE_URL = 'http://192.168.1.27:8000'\n\n/**\n * Generates a cache key for an image\n */\nexport const generateImageKey = (\n    thumbnail: number,\n    folderName: string,\n    width: number,\n    height: number\n): string => {\n    return `thumb_${folderName}_${thumbnail}_${width}x${height}`\n}\n\n/**\n * Generates the full URL for a thumbnail\n */\nexport const generateThumbnailUrl = (\n    thumbnail: number,\n    folderName: string,\n    width: number,\n    height: number\n): string => {\n    return `${API_BASE_URL}/folders/thumbnail/folder/download?number=${thumbnail}&folder=${folderName}&width=${width}&height=${height}`\n}\n\n/**\n * Stores an image URL in localStorage cache\n */\nexport const cacheImageUrl = (\n    thumbnail: number,\n    folderName: string,\n    width: number = 300,\n    height: number = 400\n): void => {\n    try {\n        // Generate the URL and cache key\n        const url = generateThumbnailUrl(thumbnail, folderName, width, height)\n        const key = generateImageKey(thumbnail, folderName, width, height)\n\n        // Get the existing cache or initialize a new one\n        const cacheJson = localStorage.getItem('thumbnailCache')\n        const cache: ImageCache = cacheJson ? JSON.parse(cacheJson) : {}\n\n        // Add or update the entry\n        cache[key] = {\n            url,\n            timestamp: Date.now(),\n            width,\n            height,\n        }\n\n        // Clean up old entries if we exceed the maximum cache size\n        cleanupCache(cache)\n\n        // Save the updated cache\n        localStorage.setItem('thumbnailCache', JSON.stringify(cache))\n    } catch (error) {\n        console.error('Error caching image URL:', error)\n    }\n}\n\n/**\n * Gets a cached image URL if available\n */\nexport const getCachedImageUrl = (\n    thumbnail: number,\n    folderName: string,\n    width: number = 300,\n    height: number = 400\n): string | null => {\n    try {\n        const key = generateImageKey(thumbnail, folderName, width, height)\n\n        // Get the cache\n        const cacheJson = localStorage.getItem('thumbnailCache')\n        if (!cacheJson) return null\n\n        const cache: ImageCache = JSON.parse(cacheJson)\n        const cachedImage = cache[key]\n\n        // Check if the image exists and hasn't expired\n        if (\n            cachedImage &&\n            Date.now() - cachedImage.timestamp < CACHE_EXPIRY_TIME\n        ) {\n            return cachedImage.url\n        }\n\n        // If the image has expired, remove it from the cache\n        if (cachedImage) {\n            delete cache[key]\n            localStorage.setItem('thumbnailCache', JSON.stringify(cache))\n        }\n\n        return null\n    } catch (error) {\n        console.error('Error retrieving cached image URL:', error)\n        return null\n    }\n}\n\n/**\n * Preloads an image into the browser cache\n */\nexport const preloadImage = (\n    thumbnail: number,\n    folderName: string,\n    width: number = 300,\n    height: number = 400\n): Promise<void> => {\n    return new Promise((resolve, reject) => {\n        // Get the URL (from cache or generate a new one)\n        let url = getCachedImageUrl(thumbnail, folderName, width, height)\n        if (!url) {\n            url = generateThumbnailUrl(thumbnail, folderName, width, height)\n            cacheImageUrl(thumbnail, folderName, width, height)\n        }\n\n        // Create a new image to preload\n        const img = new Image()\n        img.onload = () => resolve()\n        img.onerror = () => reject(new Error('Failed to preload image'))\n        img.src = url\n    })\n}\n\n/**\n * Removes old entries when the cache exceeds the maximum size\n */\nconst cleanupCache = (cache: ImageCache): void => {\n    const keys = Object.keys(cache)\n\n    // If we haven't reached the limit, no need to clean up\n    if (keys.length <= MAX_CACHE_SIZE) return\n\n    // Sort the keys by timestamp (oldest first)\n    const sortedKeys = keys.sort(\n        (a, b) => cache[a].timestamp - cache[b].timestamp\n    )\n\n    // Remove oldest entries until we're under the limit\n    const keysToRemove = sortedKeys.slice(0, keys.length - MAX_CACHE_SIZE)\n    keysToRemove.forEach((key) => {\n        delete cache[key]\n    })\n}\n\n/**\n * Clears all cached image URLs\n */\nexport const clearImageCache = (): void => {\n    localStorage.removeItem('thumbnailCache')\n}\n\n/**\n * Gets cache statistics\n */\nexport const getCacheStats = (): {\n    size: number\n    oldestEntry: number\n    newestEntry: number\n} => {\n    try {\n        const cacheJson = localStorage.getItem('thumbnailCache')\n        if (!cacheJson) return { size: 0, oldestEntry: 0, newestEntry: 0 }\n\n        const cache: ImageCache = JSON.parse(cacheJson)\n        const keys = Object.keys(cache)\n\n        if (keys.length === 0)\n            return { size: 0, oldestEntry: 0, newestEntry: 0 }\n\n        const timestamps = keys.map((key) => cache[key].timestamp)\n\n        return {\n            size: keys.length,\n            oldestEntry: Math.min(...timestamps),\n            newestEntry: Math.max(...timestamps),\n        }\n    } catch (error) {\n        console.error('Error getting cache stats:', error)\n        return { size: 0, oldestEntry: 0, newestEntry: 0 }\n    }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport {\n    cacheImageUrl,\n    getCachedImageUrl,\n    clearImageCache,\n    getCacheStats,\n    preloadImage,\n    generateThumbnailUrl,\n} from '../utils/imageCacheUtils'\n\ninterface ImageCacheStats {\n    size: number\n    oldestEntry: number\n    newestEntry: number\n}\n\nexport const useImageCache = () => {\n    const [stats, setStats] = useState<ImageCacheStats>({\n        size: 0,\n        oldestEntry: 0,\n        newestEntry: 0,\n    })\n\n    // Update stats on initial load\n    useEffect(() => {\n        setStats(getCacheStats())\n\n        // Set up event listener for storage changes from other tabs\n        const handleStorageChange = (e: StorageEvent) => {\n            if (e.key === 'thumbnailCache' || e.key === null) {\n                setStats(getCacheStats())\n            }\n        }\n\n        window.addEventListener('storage', handleStorageChange)\n        return () => window.removeEventListener('storage', handleStorageChange)\n    }, [])\n\n    // Get image URL (cached or fresh)\n    const getImageUrl = useCallback(\n        (\n            thumbnail: number,\n            folderName: string,\n            width: number = 300,\n            height: number = 400\n        ): string => {\n            const cachedUrl = getCachedImageUrl(\n                thumbnail,\n                folderName,\n                width,\n                height\n            )\n            if (cachedUrl) return cachedUrl\n\n            const url = generateThumbnailUrl(\n                thumbnail,\n                folderName,\n                width,\n                height\n            )\n            cacheImageUrl(thumbnail, folderName, width, height)\n            return url\n        },\n        []\n    )\n\n    // Cache an image URL\n    const cacheImage = useCallback(\n        (\n            thumbnail: number,\n            folderName: string,\n            width: number = 300,\n            height: number = 400\n        ): void => {\n            cacheImageUrl(thumbnail, folderName, width, height)\n            setStats(getCacheStats())\n        },\n        []\n    )\n\n    // Preload an image\n    const preload = useCallback(\n        async (\n            thumbnail: number,\n            folderName: string,\n            width: number = 300,\n            height: number = 400\n        ): Promise<void> => {\n            await preloadImage(thumbnail, folderName, width, height)\n            setStats(getCacheStats())\n        },\n        []\n    )\n\n    // Clear the entire cache\n    const clearCache = useCallback((): void => {\n        clearImageCache()\n        setStats(getCacheStats())\n    }, [])\n\n    // Bulk preload multiple images\n    const preloadBatch = useCallback(\n        async (\n            thumbnails: number[],\n            folderName: string,\n            width: number = 300,\n            height: number = 400\n        ): Promise<void> => {\n            // Load up to 5 images at a time\n            const batchSize = 5\n\n            for (let i = 0; i < thumbnails.length; i += batchSize) {\n                const batch = thumbnails.slice(i, i + batchSize)\n                await Promise.all(\n                    batch.map((thumbnail) =>\n                        preloadImage(thumbnail, folderName, width, height)\n                    )\n                )\n            }\n\n            setStats(getCacheStats())\n        },\n        []\n    )\n\n    return {\n        getImageUrl,\n        cacheImage,\n        preload,\n        preloadBatch,\n        clearCache,\n        stats,\n    }\n}\n\nexport default useImageCache\n","// src/components/CacheManager.tsx\n\nimport React, { FC, useEffect, useState } from 'react'\nimport useImageCache from '../hooks/useImageCache'\n\ninterface CacheManagerProps {\n    onClose: () => void\n}\n\ninterface CachedItem {\n    key: string\n    folderName: string\n    thumbnail: number\n    timestamp: number\n    url: string\n}\n\nconst CacheManager: FC<CacheManagerProps> = ({ onClose }) => {\n    const { stats, clearCache } = useImageCache()\n    const [cachedItems, setCachedItems] = useState<CachedItem[]>([])\n\n    // Load some cached items as examples\n    useEffect(() => {\n        try {\n            const cacheJson = localStorage.getItem('thumbnailCache')\n            if (!cacheJson) return\n\n            const cache = JSON.parse(cacheJson)\n            const items: CachedItem[] = []\n\n            Object.keys(cache).forEach((key) => {\n                // Parse the key format: thumb_folderName_thumbnail_widthxheight\n                const parts = key.split('_')\n                if (parts.length >= 3) {\n                    const folderName = parts[1]\n                    const thumbnail = parseInt(parts[2], 10)\n\n                    items.push({\n                        key,\n                        folderName,\n                        thumbnail,\n                        timestamp: cache[key].timestamp,\n                        url: cache[key].url,\n                    })\n                }\n            })\n\n            // Sort by newest first and limit to 6 items\n            const sorted = items\n                .sort((a, b) => b.timestamp - a.timestamp)\n                .slice(0, 6)\n\n            setCachedItems(sorted)\n        } catch (error) {\n            console.error('Error loading cached items:', error)\n        }\n    }, [stats.size])\n\n    // Format timestamp to human-readable date\n    const formatDate = (timestamp: number): string => {\n        if (timestamp === 0) return 'N/A'\n        return new Date(timestamp).toLocaleString()\n    }\n\n    // Format byte size to KB/MB\n    const formatCacheSize = (size: number): string => {\n        // Rough estimate - each entry is about 200 bytes\n        const totalBytes = size * 200\n\n        if (totalBytes < 1024) {\n            return `${totalBytes} bytes`\n        } else if (totalBytes < 1024 * 1024) {\n            return `${(totalBytes / 1024).toFixed(2)} KB`\n        } else {\n            return `${(totalBytes / (1024 * 1024)).toFixed(2)} MB`\n        }\n    }\n\n    return (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-lg\">\n                <h2 className=\"text-xl font-bold mb-4\">Image Cache Manager</h2>\n\n                <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n                    <h3 className=\"font-semibold mb-2\">Cache Statistics</h3>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                        <div>\n                            <p>\n                                <strong>Cached Images:</strong> {stats.size}\n                            </p>\n                            <p>\n                                <strong>Estimated Size:</strong>{' '}\n                                {formatCacheSize(stats.size)}\n                            </p>\n                        </div>\n                        <div>\n                            <p>\n                                <strong>Oldest Cached:</strong>{' '}\n                                {formatDate(stats.oldestEntry)}\n                            </p>\n                            <p>\n                                <strong>Newest Cached:</strong>{' '}\n                                {formatDate(stats.newestEntry)}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n\n                {cachedItems.length > 0 && (\n                    <div className=\"mb-6\">\n                        <h3 className=\"font-semibold mb-2\">\n                            Recent Cached Thumbnails\n                        </h3>\n                        <div className=\"grid grid-cols-3 gap-2\">\n                            {cachedItems.map((item) => (\n                                <div\n                                    key={item.key}\n                                    className=\"relative overflow-hidden rounded h-20 bg-gray-200\"\n                                >\n                                    <img\n                                        src={item.url}\n                                        alt={`${item.folderName} thumbnail`}\n                                        className=\"w-full h-full object-cover\"\n                                    />\n                                    <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-1 truncate\">\n                                        {item.folderName}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"flex justify-end space-x-2\">\n                    <button\n                        className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition\"\n                        onClick={() => {\n                            if (\n                                window.confirm(\n                                    'Are you sure you want to clear the thumbnail cache?'\n                                )\n                            ) {\n                                clearCache()\n                                setCachedItems([])\n                            }\n                        }}\n                    >\n                        Clear Cache\n                    </button>\n                    <button\n                        className=\"px-4 py-2 bg-gray-300 rounded hover:bg-gray-400 transition\"\n                        onClick={onClose}\n                    >\n                        Close\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CacheManager\n","import { useEffect, useState } from 'react'\n\nconst useMobile = (breakpoint = 768): boolean => {\n    const [isMobile, setIsMobile] = useState<boolean>(\n        typeof window !== 'undefined' ? window.innerWidth < breakpoint : false\n    )\n\n    useEffect(() => {\n        if (typeof window === 'undefined') return\n\n        const handleResize = () => {\n            setIsMobile(window.innerWidth < breakpoint)\n        }\n\n        // Add event listener\n        window.addEventListener('resize', handleResize)\n\n        // Call handler right away to update state with initial window size\n        handleResize()\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener('resize', handleResize)\n    }, [breakpoint])\n\n    return isMobile\n}\n\nexport default useMobile\n","// src/components/MenuSection.tsx\nimport React, { useState, useEffect } from 'react'\nimport {\n    Database,\n    FileText,\n    FolderOpen,\n    Info,\n    RefreshCw,\n    Search,\n    Tag,\n    X,\n} from 'lucide-react'\nimport { useNavigate } from 'react-router-dom'\nimport { useFolders } from '../hooks/useFolders'\nimport { MenuSectionProps } from '../types/gallery'\nimport CacheManager from './CacheManager'\nimport useMobile from '../hooks/useMobile' // Add this import\n\nconst MenuSection: React.FC<MenuSectionProps> = ({\n    onTagClick,\n    onApiDocsClick,\n    isOpen = false,\n    onClose, // Add this prop\n}) => {\n    // Use internal state but synchronize with prop\n    const [menuOpen, setMenuOpen] = useState<boolean>(isOpen)\n    const [showCacheManager, setShowCacheManager] = useState<boolean>(false)\n    const isMobile = useMobile() // Add this to detect mobile view\n\n    const {\n        folders,\n        roots,\n        tags,\n        searchQuery,\n        setSearchQuery,\n        selectedRoot,\n        setSelectedRoot,\n        isIndexing,\n        startIndexation,\n        cancelIndexation,\n    } = useFolders()\n    const navigate = useNavigate()\n\n    // Sync internal state with prop\n    useEffect(() => {\n        setMenuOpen(isOpen)\n    }, [isOpen])\n\n    // When internal state changes, notify parent\n    const handleMenuToggle = () => {\n        const newState = !menuOpen\n        setMenuOpen(newState)\n        if (!newState && onClose) {\n            onClose()\n        }\n    }\n\n    // Calculate total photos\n    const totalPhotos = roots.reduce(\n        (total, folder) => total + folder.photo_count,\n        0\n    )\n\n    // Extract unique tags from all albums\n    const allTags = tags.sort()\n\n    const handleRootClick = (rootName: string) => {\n        if (rootName) {\n            console.log('Click on: ' + rootName)\n            setSelectedRoot(rootName)\n        }\n    }\n\n    const handleTagClick = (type: 'tag' | 'root', value: string) => {\n        if (onTagClick) {\n            onTagClick(type, value)\n        } else {\n            if (type === 'tag') {\n                navigate(`/tag/${value}`)\n            } else if (type === 'root') {\n                navigate('/', { state: { selectedRoot: value } })\n                setSelectedRoot(value)\n            }\n        }\n    }\n\n    const handleApiDocsClick = () => {\n        if (onApiDocsClick) {\n            onApiDocsClick()\n        } else {\n            navigate('/api-docs')\n        }\n    }\n\n    const toggleCacheManager = () => {\n        setShowCacheManager(!showCacheManager)\n    }\n\n    return (\n        <div\n            className=\"mb-6 menu-section\"\n            data-open={menuOpen ? 'true' : 'false'}\n        >\n            {/* Updated layout for mobile responsiveness */}\n            <div\n                className={`${isMobile ? 'flex flex-col space-y-3' : 'flex justify-between items-center'} mb-4`}\n            >\n                <div\n                    className={`${isMobile ? 'flex flex-wrap gap-2' : 'flex space-x-2'}`}\n                >\n                    <button\n                        onClick={handleMenuToggle}\n                        className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition flex items-center\"\n                    >\n                        <Info size={16} className=\"mr-2\" />\n                        {menuOpen ? 'Hide Menu' : 'Show Menu'}\n                    </button>\n\n                    <button\n                        onClick={startIndexation}\n                        disabled={isIndexing}\n                        className={`px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition flex items-center ${isIndexing ? 'opacity-75 cursor-not-allowed' : ''}`}\n                    >\n                        {isIndexing ? (\n                            <>\n                                <RefreshCw\n                                    size={16}\n                                    className=\"mr-2 animate-spin\"\n                                />\n                                Indexing...\n                            </>\n                        ) : (\n                            <>\n                                <RefreshCw size={16} className=\"mr-2\" />\n                                Index New Photos\n                            </>\n                        )}\n                    </button>\n\n                    {/* New cancel indexation button */}\n                    <button\n                        onClick={cancelIndexation}\n                        disabled={!isIndexing}\n                        hidden={!isIndexing}\n                        className={`px-4 py-2 rounded-md transition-colors ${\n                            !isIndexing\n                                ? 'bg-gray-300 cursor-not-allowed'\n                                : 'bg-red-500 hover:bg-red-600 text-white'\n                        }`}\n                    >\n                        Cancel Indexation\n                    </button>\n\n                    <button\n                        onClick={handleApiDocsClick}\n                        className=\"px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition flex items-center\"\n                    >\n                        <FileText size={16} className=\"mr-2\" />\n                        API Docs\n                    </button>\n\n                    {/* New Cache Manager Button */}\n                    <button\n                        onClick={toggleCacheManager}\n                        className=\"px-4 py-2 bg-teal-500 text-white rounded hover:bg-teal-600 transition flex items-center\"\n                    >\n                        <Database size={16} className=\"mr-2\" />\n                        Manage Cache\n                    </button>\n                </div>\n\n                {/* Make search bar responsive */}\n                <div\n                    className={`relative ${isMobile ? 'w-full' : 'w-full max-w-md ml-4'}`}\n                >\n                    <Search\n                        size={16}\n                        className=\"absolute left-3 top-3 text-gray-400\"\n                    />\n                    <input\n                        type=\"text\"\n                        value={searchQuery || ''}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        placeholder=\"Search folders...\"\n                        className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded\"\n                    />\n                    {searchQuery && (\n                        <button\n                            onClick={() => setSearchQuery('')}\n                            className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                        >\n                            <X size={16} />\n                        </button>\n                    )}\n                </div>\n            </div>\n\n            {menuOpen && (\n                <div className=\"bg-white p-4 rounded-lg shadow-md mb-6 transition-all\">\n                    <div\n                        className={`grid grid-cols-1 ${isMobile ? '' : 'md:grid-cols-3'} gap-4`}\n                    >\n                        <div>\n                            <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                                <FolderOpen size={18} className=\"mr-2\" />\n                                Statistics\n                            </h3>\n                            <ul className=\"space-y-1\">\n                                <li className=\"flex items-center\">\n                                    <span className=\"mr-2\">•</span>\n                                    Total Albums:{' '}\n                                    <span className=\"font-medium ml-2\">\n                                        {folders.length}\n                                    </span>\n                                </li>\n                                <li className=\"flex items-center\">\n                                    <span className=\"mr-2\">•</span>\n                                    Total Photos:{' '}\n                                    <span className=\"font-medium ml-2\">\n                                        {totalPhotos}\n                                    </span>\n                                </li>\n                                <li className=\"flex items-center\">\n                                    <span className=\"mr-2\">•</span>\n                                    Total Roots:{' '}\n                                    <span className=\"font-medium ml-2\">\n                                        {roots.length}\n                                    </span>\n                                </li>\n                                <li className=\"flex items-center\">\n                                    <span className=\"mr-2\">•</span>\n                                    Total Tags:{' '}\n                                    <span className=\"font-medium ml-2\">\n                                        {allTags.length}\n                                    </span>\n                                </li>\n                            </ul>\n                        </div>\n\n                        <div>\n                            <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                                <FolderOpen size={18} className=\"mr-2\" />\n                                Roots\n                            </h3>\n                            <div className=\"flex flex-col space-y-2\">\n                                <div\n                                    className={`px-3 py-2 rounded cursor-pointer ${!selectedRoot ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}`}\n                                    onClick={() => handleRootClick('')}\n                                >\n                                    All Roots\n                                </div>\n                                {roots.map((root) => (\n                                    <div\n                                        key={root.root}\n                                        className={`px-3 py-2 rounded cursor-pointer ${selectedRoot === root.root ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}`}\n                                        onClick={() =>\n                                            handleRootClick(root.root)\n                                        }\n                                    >\n                                        {root.root}\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n\n                        <div>\n                            <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                                <Tag size={18} className=\"mr-2\" />\n                                Available Tags\n                            </h3>\n                            {allTags.length > 0 ? (\n                                <div className=\"flex flex-wrap gap-2\">\n                                    {allTags.map((tag) => (\n                                        <span\n                                            key={tag}\n                                            className=\"px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full cursor-pointer hover:bg-blue-200\"\n                                            onClick={() =>\n                                                handleTagClick('tag', tag)\n                                            }\n                                        >\n                                            {tag}\n                                        </span>\n                                    ))}\n                                </div>\n                            ) : (\n                                <p className=\"text-gray-500\">\n                                    No tags available\n                                </p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {/* Cache Manager Modal */}\n            {showCacheManager && (\n                <CacheManager onClose={() => setShowCacheManager(false)} />\n            )}\n        </div>\n    )\n}\n\nexport default React.memo(MenuSection)\n","// src/components/ThumbnailSlideshow.tsx\nimport React, { FC, useEffect, useState, useCallback } from 'react'\nimport {\n    getCachedImageUrl,\n    cacheImageUrl,\n    preloadImage,\n    generateThumbnailUrl,\n} from '../utils/imageCacheUtils'\n\ninterface ThumbnailSlideshowProps {\n    thumbnails: number[]\n    folderName: string\n}\n\nconst ThumbnailSlideshow: FC<ThumbnailSlideshowProps> = ({\n    thumbnails,\n    folderName,\n}) => {\n    const [currentIndex, setCurrentIndex] = useState<number>(0)\n    const [loadedImages, setLoadedImages] = useState<Record<number, boolean>>(\n        {}\n    )\n    const [isTouching, setIsTouching] = useState<boolean>(false)\n    const [touchStartX, setTouchStartX] = useState<number | null>(null)\n\n    // Get image URL with caching\n    const getImageUrl = useCallback(\n        (thumbnail: number, isThumbnail: boolean = false) => {\n            const width = isThumbnail ? 150 : 300\n            const height = isThumbnail ? 200 : 400\n\n            // Try to get from cache first\n            const cachedUrl = getCachedImageUrl(\n                thumbnail,\n                folderName,\n                width,\n                height\n            )\n            if (cachedUrl) {\n                return cachedUrl\n            }\n\n            // If not in cache, generate and cache the URL\n            const url = generateThumbnailUrl(\n                thumbnail,\n                folderName,\n                width,\n                height\n            )\n            cacheImageUrl(thumbnail, folderName, width, height)\n            return url\n        },\n        [folderName]\n    )\n\n    // Reset loaded state when thumbnails change\n    useEffect(() => {\n        setLoadedImages({})\n    }, [thumbnails])\n\n    // Set up interval for changing thumbnails when not being touched\n    useEffect(() => {\n        if (isTouching || thumbnails.length === 0) return\n\n        const interval = setInterval(() => {\n            setCurrentIndex((prevIndex) => (prevIndex + 1) % thumbnails.length)\n        }, 5000)\n\n        return () => clearInterval(interval)\n    }, [thumbnails.length, isTouching])\n\n    // Preload the next few images when current index changes\n    useEffect(() => {\n        if (thumbnails.length === 0) return\n\n        // Preload the next 2 images\n        const preloadNextImages = async () => {\n            try {\n                for (let i = 1; i <= 2; i++) {\n                    const nextIndex = (currentIndex + i) % thumbnails.length\n                    await preloadImage(thumbnails[nextIndex], folderName)\n                }\n            } catch (error) {\n                console.error('Error preloading images:', error)\n            }\n        }\n\n        preloadNextImages()\n    }, [currentIndex, thumbnails, folderName])\n\n    // Handle image load events\n    const handleImageLoad = (index: number) => {\n        setLoadedImages((prev) => ({ ...prev, [index]: true }))\n    }\n\n    // Check if image is loaded\n    const isImageLoaded = (index: number) => !!loadedImages[index]\n\n    // Swipe handling\n    const handleTouchStart = (e: React.TouchEvent) => {\n        setIsTouching(true)\n        setTouchStartX(e.touches[0].clientX)\n    }\n\n    const handleTouchMove = (e: React.TouchEvent) => {\n        if (touchStartX === null) return\n    }\n\n    const handleTouchEnd = (e: React.TouchEvent) => {\n        if (touchStartX === null) {\n            setIsTouching(false)\n            return\n        }\n\n        const touchEndX = e.changedTouches[0].clientX\n        const diffX = touchStartX - touchEndX\n\n        // If swipe was significant enough\n        if (Math.abs(diffX) > 50) {\n            if (diffX > 0) {\n                // Swiped left - go to next\n                setCurrentIndex((prev) => (prev + 1) % thumbnails.length)\n            } else {\n                // Swiped right - go to previous\n                setCurrentIndex(\n                    (prev) => (prev - 1 + thumbnails.length) % thumbnails.length\n                )\n            }\n        }\n\n        setTouchStartX(null)\n        setIsTouching(false)\n    }\n\n    return (\n        <div\n            className=\"relative h-64 bg-gray-200 overflow-hidden\"\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n        >\n            {thumbnails.map((thumbnail, index) => {\n                // Get the URLs (from cache if available)\n                const regularUrl = getImageUrl(thumbnail)\n                const thumbnailUrl = getImageUrl(thumbnail, true)\n\n                return (\n                    <img\n                        key={index}\n                        srcSet={`${thumbnailUrl} 1x, ${regularUrl} 2x`}\n                        src={regularUrl}\n                        alt={`Thumbnail ${index + 1}`}\n                        className={`absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 ${\n                            index === currentIndex ? 'opacity-100' : 'opacity-0'\n                        } ${isImageLoaded(index) ? 'block' : 'hidden'}`}\n                        onLoad={() => handleImageLoad(index)}\n                    />\n                )\n            })}\n\n            {!isImageLoaded(currentIndex) && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-gray-200\">\n                    <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                </div>\n            )}\n\n            {/* Indicators */}\n            <div className=\"absolute bottom-2 left-0 right-0 flex justify-center gap-1\">\n                {thumbnails.map((_, index) => (\n                    <button\n                        key={index}\n                        onClick={() => setCurrentIndex(index)}\n                        className={`w-2 h-2 rounded-full border-none focus:outline-none ${\n                            index === currentIndex\n                                ? 'bg-white'\n                                : 'bg-white bg-opacity-50'\n                        }`}\n                        aria-label={`Go to slide ${index + 1}`}\n                    />\n                ))}\n            </div>\n\n            {/* Touch hint overlay */}\n            <div className=\"absolute inset-0 pointer-events-none flex items-center\">\n                <div className=\"w-6 h-12 mx-auto opacity-0 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n                    <div className=\"animate-pulse\">⟷</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ThumbnailSlideshow\n","import React, { FC, MouseEvent } from 'react'\nimport { Camera, Play, Tag, Trash2 } from 'lucide-react'\nimport ThumbnailSlideshow from './ThumbnailSlideshow'\nimport { Folder } from '../types/gallery'\n\ninterface FolderCardProps {\n    folder: Folder\n    onView: (folderName: string) => void\n    onTagClick: (type: 'tag' | 'root', value: string) => void\n    onTagManage: (folder: Folder) => void\n    onRandomPhoto: (folderName: string) => void\n    onDelete: (album: Folder) => void\n}\n\nconst FolderCard: FC<FolderCardProps> = ({\n    folder,\n    onView,\n    onTagClick,\n    onTagManage,\n    onRandomPhoto,\n    onDelete,\n}) => {\n    // Detect mobile screen width\n    const isMobile = false\n\n    return (\n        <div className=\"bg-white shadow-md overflow-hidden\">\n            <div className=\"relative\">\n                <ThumbnailSlideshow\n                    key={`thumbnail-${folder.title}-${Date.now()}`} // Add a unique key with timestamp\n                    thumbnails={[1, 2, 3]}\n                    folderName={folder.title}\n                />\n                <div\n                    className=\"absolute top-2 right-2 px-2 py-1 bg-blue-500 text-white text-xs rounded cursor-pointer hover:bg-blue-600\"\n                    onClick={(e: MouseEvent<HTMLDivElement>) => {\n                        e.stopPropagation()\n                        onTagClick('root', folder.root)\n                    }}\n                >\n                    {folder.root}\n                </div>\n            </div>\n\n            <div className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                    <h2 className=\"text-xl font-semibold mb-2\">\n                        {folder.title}\n                    </h2>\n                    <button\n                        onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                            e.stopPropagation()\n                            onDelete(folder)\n                        }}\n                        className=\"p-2 text-red-500 hover:bg-red-100 rounded-full\"\n                        title=\"Delete album\"\n                        aria-label=\"Delete album\"\n                    >\n                        <Trash2 size={18} />\n                    </button>\n                </div>\n\n                <p className=\"text-gray-600 mb-2 flex items-center\">\n                    <Camera size={16} className=\"mr-1\" />\n                    <span>{folder.photo_count} photos</span>\n                </p>\n\n                {folder.tags.length > 0 && (\n                    <div className=\"mb-4 flex flex-wrap gap-2\">\n                        {folder.tags.map((tag) => (\n                            <span\n                                key={tag}\n                                className=\"px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full cursor-pointer hover:bg-blue-200\"\n                                onClick={(e: MouseEvent<HTMLSpanElement>) => {\n                                    e.stopPropagation()\n                                    onTagClick('tag', tag)\n                                }}\n                            >\n                                {tag}\n                            </span>\n                        ))}\n                    </div>\n                )}\n\n                {isMobile ? (\n                    // Mobile layout: stacked buttons\n                    <div className=\"flex flex-col gap-2\">\n                        <button\n                            onClick={() => onView(folder.title)}\n                            className=\"action-button py-3 bg-blue-500 text-white rounded hover:bg-blue-600 transition flex items-center justify-center\"\n                        >\n                            <Play size={16} className=\"mr-2\" /> View Folder\n                        </button>\n                        <div className=\"grid grid-cols-2 gap-2\">\n                            <button\n                                onClick={() => onRandomPhoto(folder.title)}\n                                className=\"action-button py-2 bg-green-500 text-white rounded hover:bg-green-600 transition flex items-center justify-center\"\n                            >\n                                <Camera size={16} className=\"mr-1\" /> Random\n                            </button>\n                            <button\n                                onClick={() => onTagManage(folder)}\n                                className=\"action-button py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition flex items-center justify-center\"\n                            >\n                                <Tag size={16} className=\"mr-1\" /> Tags\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                    // Desktop layout: grid\n                    <div className=\"grid grid-cols-2 gap-2 mt-4\">\n                        <button\n                            onClick={() => onView(folder.title)}\n                            className=\"px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition flex items-center justify-center\"\n                        >\n                            <Play size={16} className=\"mr-1\" /> View Album\n                        </button>\n                        <button\n                            onClick={() => onRandomPhoto(folder.title)}\n                            className=\"px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition flex items-center justify-center\"\n                        >\n                            <Camera size={16} className=\"mr-1\" /> Random Photo\n                        </button>\n                        <button\n                            onClick={() => onTagManage(folder)}\n                            className=\"px-3 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition flex items-center justify-center col-span-2\"\n                        >\n                            <Tag size={16} className=\"mr-1\" /> Manage Tags\n                        </button>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default FolderCard\n","// src/components/MobileNavigation.tsx\nimport React, { FC, useState } from 'react'\nimport {\n    Database, // Add this new icon\n    FileText,\n    FolderOpen,\n    Home,\n    Menu,\n    RefreshCw,\n    Tag,\n    X,\n} from 'lucide-react'\nimport CacheManager from './CacheManager' // Import the CacheManager component\n\ninterface MobileNavigationProps {\n    onHomeClick: () => void\n    onRootClick: () => void\n    onTagsClick: () => void\n    onIndexClick: () => void\n    onApiDocsClick?: () => void\n    isIndexing: boolean\n}\n\nconst MobileNavigation: FC<MobileNavigationProps> = ({\n    onHomeClick,\n    onRootClick,\n    onTagsClick,\n    onIndexClick,\n    onApiDocsClick,\n    isIndexing,\n}) => {\n    const [menuOpen, setMenuOpen] = useState(false)\n    const [showCacheManager, setShowCacheManager] = useState(false) // New state\n\n    const toggleMenu = () => {\n        setMenuOpen(!menuOpen)\n    }\n\n    return (\n        <>\n            {/* Fixed button at bottom right */}\n            <button\n                onClick={toggleMenu}\n                className=\"fixed bottom-4 right-4 z-40 w-14 h-14 rounded-full bg-blue-500 text-white shadow-lg flex items-center justify-center\"\n            >\n                {menuOpen ? <X size={24} /> : <Menu size={24} />}\n            </button>\n\n            {/* Menu that appears when button is clicked */}\n            {menuOpen && (\n                <div className=\"fixed bottom-20 right-4 z-40 bg-white rounded-lg shadow-xl overflow-hidden\">\n                    <div className=\"flex flex-col w-56\">\n                        <button\n                            onClick={() => {\n                                onHomeClick()\n                                toggleMenu()\n                            }}\n                            className=\"flex items-center px-4 py-3 hover:bg-gray-100 transition\"\n                        >\n                            <Home size={18} className=\"mr-3\" />\n                            <span>Home</span>\n                        </button>\n\n                        <button\n                            onClick={() => {\n                                onRootClick()\n                                toggleMenu()\n                            }}\n                            className=\"flex items-center px-4 py-3 hover:bg-gray-100 transition\"\n                        >\n                            <FolderOpen size={18} className=\"mr-3\" />\n                            <span>Roots</span>\n                        </button>\n\n                        <button\n                            onClick={() => {\n                                onTagsClick()\n                                toggleMenu()\n                            }}\n                            className=\"flex items-center px-4 py-3 hover:bg-gray-100 transition\"\n                        >\n                            <Tag size={18} className=\"mr-3\" />\n                            <span>Tags</span>\n                        </button>\n\n                        <button\n                            onClick={() => {\n                                onIndexClick()\n                                toggleMenu()\n                            }}\n                            disabled={isIndexing}\n                            className={`flex items-center px-4 py-3 hover:bg-gray-100 transition ${isIndexing ? 'opacity-50' : ''}`}\n                        >\n                            <RefreshCw\n                                size={18}\n                                className={`mr-3 ${isIndexing ? 'animate-spin' : ''}`}\n                            />\n                            <span>\n                                {isIndexing ? 'Indexing...' : 'Index Photos'}\n                            </span>\n                        </button>\n\n                        {/* New Cache Manager Button */}\n                        <button\n                            onClick={() => {\n                                setShowCacheManager(true)\n                                toggleMenu()\n                            }}\n                            className=\"flex items-center px-4 py-3 hover:bg-gray-100 transition\"\n                        >\n                            <Database size={18} className=\"mr-3\" />\n                            <span>Manage Cache</span>\n                        </button>\n\n                        {onApiDocsClick && (\n                            <button\n                                onClick={() => {\n                                    onApiDocsClick()\n                                    toggleMenu()\n                                }}\n                                className=\"flex items-center px-4 py-3 hover:bg-gray-100 transition\"\n                            >\n                                <FileText size={18} className=\"mr-3\" />\n                                <span>API Docs</span>\n                            </button>\n                        )}\n                    </div>\n                </div>\n            )}\n\n            {/* Cache Manager Modal */}\n            {showCacheManager && (\n                <CacheManager onClose={() => setShowCacheManager(false)} />\n            )}\n        </>\n    )\n}\n\nexport default MobileNavigation\n","// src-ui/src/components/DeleteDialog.tsx\nimport React from 'react'\nimport { Trash2 } from 'lucide-react'\nimport { Folder } from '../types/gallery'\n\ninterface DeleteDialogProps {\n    folder: Folder\n    onCancel: () => void\n    onConfirm: () => void\n}\n\nconst DeleteDialog: React.FC<DeleteDialogProps> = ({\n    folder,\n    onCancel,\n    onConfirm,\n}) => {\n    return (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n                <h3 className=\"text-xl font-bold mb-2\">Delete Folder</h3>\n                <p className=\"mb-4\">\n                    Are you sure you want to delete \"{folder.title}\"? This\n                    action cannot be undone.\n                </p>\n                <div className=\"flex justify-end gap-2 mt-6\">\n                    <button\n                        onClick={onCancel}\n                        className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition\"\n                    >\n                        Cancel\n                    </button>\n                    <button\n                        onClick={onConfirm}\n                        className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition flex items-center\"\n                    >\n                        <Trash2 size={16} className=\"mr-2\" />\n                        Delete Folder\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(DeleteDialog)\n","// src-ui/src/components/TagDialog.tsx\nimport React, { useEffect, useState } from 'react'\nimport { X } from 'lucide-react'\nimport { Folder } from '../types/gallery'\nimport { useFolders } from '../hooks/useFolders'\nimport useMobile from '../hooks/useMobile'\n\ninterface TagDialogProps {\n    folder: Folder\n    onCancel: () => void\n    onSave: () => void\n}\n\nconst TagDialog: React.FC<TagDialogProps> = ({ folder, onCancel, onSave }) => {\n    const [localFolder, setlocalFolder] = useState<Folder>({\n        ...folder,\n        tags: [...folder.tags],\n    })\n    const { tags, updateFolderTags } = useFolders()\n    const isMobile = useMobile()\n\n    useEffect(() => {\n        setlocalFolder({ ...folder, tags: [...folder.tags] })\n    }, [folder])\n\n    const toggleTag = async (tag: string) => {\n        const updatedFolder = { ...localFolder }\n\n        if (updatedFolder.tags?.includes(tag)) {\n            // Remove the tag\n            updatedFolder.tags = updatedFolder.tags.filter((t) => t !== tag)\n        } else {\n            // Add the tag\n            updatedFolder.tags = [...updatedFolder.tags, tag]\n        }\n\n        try {\n            await updateFolderTags(updatedFolder.title, updatedFolder.tags)\n            setlocalFolder(updatedFolder)\n        } catch (err) {\n            console.error('Failed to update tags:', err)\n        }\n    }\n\n    return (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div\n                className={`bg-white rounded-lg p-6 w-full ${isMobile ? 'max-h-[85vh]' : 'max-w-2xl max-h-[90vh]'} overflow-hidden flex flex-col`}\n            >\n                <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"text-xl font-bold\">\n                        Manage Tags for \"{localFolder.title}\"\n                    </h3>\n                    <button\n                        onClick={onCancel}\n                        className=\"p-2 rounded-full hover:bg-gray-200\"\n                    >\n                        <X size={24} />\n                    </button>\n                </div>\n\n                <div className=\"mb-4\">\n                    <h4 className=\"font-semibold mb-2\">Current Tags</h4>\n                    {localFolder.tags && localFolder.tags.length > 0 ? (\n                        <div className=\"flex flex-wrap gap-2 mb-4\">\n                            {localFolder.tags.map((tag) => (\n                                <span\n                                    key={tag}\n                                    className=\"px-3 py-1 bg-blue-500 text-white text-sm rounded-full flex items-center\"\n                                >\n                                    {tag}\n                                    <button\n                                        onClick={() => toggleTag(tag)}\n                                        className=\"ml-2 bg-blue-600 rounded-full p-1 hover:bg-blue-700 min-h-0 min-w-0\"\n                                    >\n                                        <X size={12} />\n                                    </button>\n                                </span>\n                            ))}\n                        </div>\n                    ) : (\n                        <p className=\"text-gray-500 mb-4\">\n                            No tags assigned to this album yet.\n                        </p>\n                    )}\n                </div>\n\n                <div className=\"overflow-auto flex-grow\">\n                    <h4 className=\"font-semibold mb-2\">Available Tags</h4>\n                    <div\n                        className={`grid ${isMobile ? 'grid-cols-1 sm:grid-cols-2' : 'grid-cols-2 sm:grid-cols-3'} gap-2`}\n                    >\n                        {tags\n                            .filter(\n                                (tag) =>\n                                    !localFolder.tags ||\n                                    !localFolder.tags.includes(tag)\n                            )\n                            .map((tag) => (\n                                <div\n                                    key={tag}\n                                    className=\"px-3 py-2 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100 hover:border-blue-500 flex items-center\"\n                                    onClick={() => toggleTag(tag)}\n                                >\n                                    <span className=\"mr-2 w-4 h-4 flex items-center justify-center bg-gray-200 text-gray-700 rounded-full\">\n                                        +\n                                    </span>{' '}\n                                    {tag}\n                                </div>\n                            ))}\n                    </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2 mt-6 pt-4 border-t\">\n                    <button\n                        onClick={onCancel}\n                        className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition\"\n                    >\n                        Cancel\n                    </button>\n                    <button\n                        onClick={onSave}\n                        className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\"\n                    >\n                        Save Changes\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(TagDialog)\n","import React, { FC, useEffect, useState } from 'react'\nimport { Gallery, Item, useGallery } from 'react-photoswipe-gallery'\nimport '../style/photoswipe.css'\nimport { JsonFilePhoto } from '../types/gallery'\n\ninterface PhotoSwipeGalleryProps {\n    images: JsonFilePhoto[]\n    onClick?: (index: number) => void\n}\n\nexport const GalleryContent: FC<{\n    images: JsonFilePhoto[]\n    hidden: boolean\n    openNow?: boolean\n}> = ({ images, hidden, openNow }) => {\n    const { open, close } = useGallery()\n    const [loadedImages, setLoadedImages] = useState<Record<string, boolean>>(\n        {}\n    )\n\n    // Handle image load events\n    const handleImageLoad = (photoId: string) => {\n        setLoadedImages((prev) => ({ ...prev, [photoId]: true }))\n    }\n\n    // Check if image is loaded\n    const isImageLoaded = (photoId: string) => !!loadedImages[photoId]\n\n    useEffect(() => {\n        if (hidden) {\n            open(0)\n        }\n        // Delay the opening slightly to ensure refs are properly set up\n        const timer = setTimeout(() => {\n            // Only try to open if we have images\n            if (images.length > 0) {\n                if (openNow) {\n                    open(0)\n                }\n            }\n        }, 100)\n\n        return () => {\n            close()\n            return clearTimeout(timer)\n        }\n    }, [open, close, images])\n\n    return (\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-1\">\n            {images.map((image, index) => (\n                <Item\n                    key={image.hash}\n                    original={`http://192.168.1.27:8000/files/${image.hash}/download`}\n                    thumbnail={`http://192.168.1.27:8000/files/thumbnail/photo/download?hash=${image.hash}&width=400&height=300`}\n                    width={image.width}\n                    alt={`${image.filename}.${image.extention}`}\n                    height={image.height}\n                    caption={`${image.folder_name} - ${image.filename} (${image.height}x${image.width}) - ${JSON.parse(image.tags)}`}\n                >\n                    {({ ref, open }) => (\n                        <div className=\"cursor-pointer bg-gray-100 rounded overflow-hidden\">\n                            <div className=\"relative pb-full\">\n                                <img\n                                    ref={ref}\n                                    hidden={hidden}\n                                    srcSet={`\n                                        http://192.168.1.27:8000/files/thumbnail/photo/download?hash=${image.hash}&width=150&height=200 1x,\n                                        http://192.168.1.27:8000/files/thumbnail/photo/download?hash=${image.hash}&width=400&height=300 2x\n                                    `}\n                                    src={`http://192.168.1.27:8000/files/thumbnail/photo/download?hash=${image.hash}&width=400&height=300`}\n                                    alt={`${image.filename}.${image.extention}`}\n                                    loading=\"lazy\"\n                                    fetchPriority=\"low\"\n                                    onClick={open}\n                                    className={`absolute inset-0 w-full h-full object-cover transition-opacity duration-300 ${\n                                        isImageLoaded(image.hash)\n                                            ? 'opacity-100'\n                                            : 'opacity-0'\n                                    }`}\n                                    onLoad={() => handleImageLoad(image.hash)}\n                                />\n                                {!isImageLoaded(image.hash) && (\n                                    <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100\">\n                                        <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                </Item>\n            ))}\n        </div>\n    )\n}\n\nconst PhotoSwipeGallery: FC<PhotoSwipeGalleryProps> = ({ images }) => {\n    return (\n        <Gallery\n            withCaption\n            withDownloadButton\n            options={{\n                bgOpacity: 1,\n                preload: [2, 4],\n                loop: false,\n                pinchToClose: false,\n                closeOnVerticalDrag: false,\n            }}\n        >\n            <div>\n                <GalleryContent images={images} hidden={false} />\n            </div>\n        </Gallery>\n    )\n}\n\nexport default PhotoSwipeGallery\n","import React, { createContext, ReactNode, useCallback, useState } from 'react'\nimport { Folder, JsonFilePhoto } from '../types/gallery'\nimport { api } from '../services/api'\n\ninterface UIContextType {\n    tagDialogOpen: boolean\n    deleteDialogOpen: boolean\n    randomPhotoDialogOpen: boolean\n    selectedFolder: Folder | null\n    folderToDelete: Folder | null\n    randomPhotos: JsonFilePhoto[]\n    openTagDialog: (folder: any) => void\n    closeTagDialog: () => void\n    openDeleteDialog: (folder: Folder) => void\n    closeDeleteDialog: () => void\n    openRandomPhotos: (folderName: string) => Promise<void>\n    closeRandomPhotos: () => void // New function\n}\n\nexport const UIContext = createContext<UIContextType>({} as UIContextType)\n\nexport const UIProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n    const [tagDialogOpen, setTagDialogOpen] = useState<boolean>(false)\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState<boolean>(false)\n    const [randomPhotoDialogOpen, setRandomPhotoDialogOpen] =\n        useState<boolean>(false)\n    const [selectedFolder, setSelectedFolder] = useState<Folder | null>(null)\n    const [folderToDelete, setFolderToDelete] = useState<Folder | null>(null)\n    const [randomPhotos, setRandomPhotos] = useState<JsonFilePhoto[]>([])\n\n    // Tag dialog functions\n    const openTagDialog = useCallback(async (folder: Folder) => {\n        const tags = await api.tags.getAll(folder.title)\n        setSelectedFolder({\n            ...folder,\n            tags: [...tags], // Create a deep copy to avoid reference issues\n        })\n        setTagDialogOpen(true)\n    }, [])\n\n    const closeTagDialog = useCallback(() => {\n        setTagDialogOpen(false)\n        setSelectedFolder(null)\n    }, [])\n\n    // Delete dialog functions\n    const openDeleteDialog = useCallback((folder: Folder) => {\n        setFolderToDelete(folder)\n        setDeleteDialogOpen(true)\n    }, [])\n\n    const closeDeleteDialog = useCallback(() => {\n        setDeleteDialogOpen(false)\n        setFolderToDelete(null)\n    }, [])\n\n    // Random photo functions\n    const openRandomPhotos = useCallback(async (folderTitle: string) => {\n        try {\n            const photos = await api.photos.getRandomByFolder(folderTitle)\n            if (photos.items.length > 0) {\n                setRandomPhotos(photos.items)\n                setRandomPhotoDialogOpen(true)\n            }\n        } catch (error) {\n            console.error('Error fetching random photo:', error)\n        }\n    }, [])\n\n    // Add close function for random photos\n    const closeRandomPhotos = useCallback(() => {\n        setRandomPhotoDialogOpen(false)\n        setRandomPhotos([]) // Clear the photos array to free memory\n    }, [])\n\n    return (\n        <UIContext.Provider\n            value={{\n                tagDialogOpen,\n                deleteDialogOpen,\n                randomPhotoDialogOpen,\n                selectedFolder,\n                folderToDelete,\n                randomPhotos,\n                openTagDialog,\n                closeTagDialog,\n                openDeleteDialog,\n                closeDeleteDialog,\n                openRandomPhotos,\n                closeRandomPhotos, // Add the new function to the context\n            }}\n        >\n            {children}\n        </UIContext.Provider>\n    )\n}\n","// src-ui/src/hooks/useUI.ts\nimport { useContext } from 'react'\nimport { UIContext } from '../context/UIContext'\n\nexport const useUI = () => {\n    return useContext(UIContext)\n}\n","import React, { FC, useEffect } from 'react'\nimport { Gallery } from 'react-photoswipe-gallery'\nimport { RandomPhotoProps } from '../types/gallery'\nimport { GalleryContent } from './PhotoSwipeGallery'\nimport { useUI } from '../hooks/useUI'\n\nconst RandomPhotoView: FC<RandomPhotoProps> = ({ photos }) => {\n    // Get the closeRandomPhotos function from context\n    const { closeRandomPhotos } = useUI()\n\n    // Add cleanup effect when component unmounts\n    useEffect(() => {\n        return () => {\n            // This ensures the state is cleaned up even if the component is unmounted\n            // without explicit closing (e.g., when navigating away)\n            closeRandomPhotos()\n        }\n    }, [closeRandomPhotos])\n\n    return (\n        <Gallery\n            withCaption\n            withDownloadButton\n            onOpen={(pswpInstance) => {\n                pswpInstance.on('close', () => {\n                    console.log('CLOSED CALLED')\n                    closeRandomPhotos()\n                })\n            }}\n            options={{\n                bgOpacity: 1,\n                preload: [2, 4],\n                loop: false,\n                pinchToClose: false,\n                closeOnVerticalDrag: false,\n            }}\n        >\n            <div>\n                <GalleryContent images={photos} hidden={true} openNow={true} />\n            </div>\n        </Gallery>\n    )\n}\n\nexport default RandomPhotoView\n","import { useCallback, useEffect, useRef } from 'react'\n\ninterface UseInfiniteScrollProps {\n    onLoadMore: () => void\n    hasMore: boolean\n    loading: boolean\n}\n\nexport const useInfiniteScroll = ({\n    onLoadMore,\n    hasMore,\n    loading,\n}: UseInfiniteScrollProps) => {\n    const observerRef = useRef<IntersectionObserver | null>(null)\n    const loadMoreRef = useCallback(\n        (node: HTMLDivElement) => {\n            if (loading) return\n\n            if (observerRef.current) {\n                observerRef.current.disconnect()\n            }\n\n            observerRef.current = new IntersectionObserver((entries) => {\n                if (entries[0].isIntersecting && hasMore) {\n                    onLoadMore()\n                }\n            })\n\n            if (node) {\n                observerRef.current.observe(node)\n            }\n        },\n        [loading, hasMore, onLoadMore]\n    )\n\n    useEffect(() => {\n        return () => {\n            if (observerRef.current) {\n                observerRef.current.disconnect()\n            }\n        }\n    }, [])\n\n    return loadMoreRef\n}\n","import React, { useEffect, useState } from 'react' // Added useState import\nimport { useNavigate, useSearchParams } from 'react-router-dom'\nimport MenuSection from '../components/MenuSection'\nimport FolderCard from '../components/FolderCard'\nimport MobileNavigation from '../components/MobileNavigation'\nimport DeleteDialog from '../components/DeleteDialog'\nimport TagDialog from '../components/TagDialog'\nimport RandomPhotoView from '../components/RandomPhotoView'\nimport { useFolders } from '../hooks/useFolders'\nimport { useUI } from '../hooks/useUI'\nimport useMobile from '../hooks/useMobile'\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll'\n\nconst FolderList: React.FC = () => {\n    // Add state for menu open/close\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n    const {\n        filteredFolders,\n        loading,\n        searchQuery,\n        selectedRoot,\n        setSearchQuery,\n        setSelectedRoot,\n        deleteFolder,\n        startIndexation,\n        isIndexing,\n        hasMore,\n        loadMoreFolders,\n    } = useFolders()\n\n    const {\n        tagDialogOpen,\n        deleteDialogOpen,\n        randomPhotoDialogOpen,\n        selectedFolder,\n        folderToDelete,\n        randomPhotos,\n        openTagDialog,\n        closeTagDialog,\n        openDeleteDialog,\n        closeDeleteDialog,\n        openRandomPhotos,\n    } = useUI()\n\n    const navigate = useNavigate()\n    const isMobile = useMobile()\n    const [searchParams, setSearchParams] = useSearchParams()\n    const loadMoreRef = useInfiniteScroll({\n        onLoadMore: loadMoreFolders,\n        hasMore,\n        loading,\n    })\n\n    // Read root from URL parameters when component mounts\n    useEffect(() => {\n        const rootParam = searchParams.get('root')\n        if (rootParam && rootParam !== selectedRoot) {\n            setSelectedRoot(rootParam)\n        } else if (!rootParam && selectedRoot) {\n            // If there's no root param but we have a selected root,\n            // this could be from a direct navigation, so update URL\n            updateRootInUrl(selectedRoot)\n        }\n    }, [])\n\n    // Read searchBy from URL parameters when component mounts\n    useEffect(() => {\n        const searchParam = searchParams.get('searchBy')\n        if (searchParam && searchParam !== searchQuery) {\n            setSearchQuery(searchParam)\n        } else if (!searchParam && searchQuery) {\n            // If there's no root param but we have a selected root,\n            // this could be from a direct navigation, so update URL\n            updateSearchInUrl(searchQuery)\n        }\n    }, [])\n\n    // Update URL when selectedRoot changes\n    useEffect(() => {\n        updateRootInUrl(selectedRoot)\n    }, [selectedRoot])\n\n    // Helper to update URL with root parameter\n    const updateRootInUrl = (root: string | null) => {\n        if (root) {\n            setSearchParams({ root })\n        } else {\n            // Remove the root parameter for \"All Roots\"\n            searchParams.delete('root')\n            setSearchParams(searchParams)\n        }\n    }\n\n    const updateSearchInUrl = (searchBy: string | null) => {\n        if (searchBy) {\n            setSearchParams({ searchBy })\n        } else {\n            // Remove the root parameter for \"All Roots\"\n            searchParams.delete('searchBy')\n            setSearchParams(searchParams)\n        }\n    }\n\n    const handleTagClick = (type: 'tag' | 'root', value: string) => {\n        if (type === 'tag') {\n            navigate(`/tag/${value}`)\n        } else if (type === 'root') {\n            setSelectedRoot(value)\n            // URL will be updated by the effect\n        }\n    }\n\n    const handleViewFolder = (folderTitle: string) => {\n        navigate(`/folder/${folderTitle}`)\n    }\n\n    const handleDeleteConfirm = async () => {\n        if (folderToDelete) {\n            await deleteFolder(folderToDelete.title)\n            closeDeleteDialog()\n        }\n    }\n\n    const handleApiDocsClick = () => {\n        navigate('/api-docs')\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 mobile-safe-bottom\">\n            <div className=\"container mx-auto p-4\">\n                <h1 className=\"text-3xl font-bold mb-6\">Gallery NAS</h1>\n\n                <MenuSection\n                    onTagClick={handleTagClick}\n                    onApiDocsClick={handleApiDocsClick}\n                    isOpen={isMenuOpen} // Pass the open state to MenuSection\n                    onClose={() => setIsMenuOpen(false)} // Add close handler\n                />\n\n                {filteredFolders.length === 0 && (\n                    <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\n                        <h2 className=\"text-xl font-semibold mb-2\">\n                            No folders found\n                        </h2>\n                        <p className=\"text-gray-600\">\n                            {selectedRoot\n                                ? `No folders in folder \"${selectedRoot}\"${searchQuery ? ` matching \"${searchQuery}\"` : ''}`\n                                : `No folders match your search criteria \"${searchQuery}\"`}\n                        </p>\n                        <div className=\"mt-4 flex flex-col md:flex-row justify-center gap-2\">\n                            {searchQuery && (\n                                <button\n                                    onClick={() => setSearchQuery('')}\n                                    className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\"\n                                >\n                                    Clear Search\n                                </button>\n                            )}\n                            {selectedRoot && (\n                                <button\n                                    onClick={() => setSelectedRoot('')}\n                                    className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition\"\n                                >\n                                    Show All Roots\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                )}\n\n                {/* Folder Cards Grid */}\n                <div\n                    className={`grid grid-cols-1 ${\n                        isMobile\n                            ? 'gap-4'\n                            : 'md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-2'\n                    }`}\n                >\n                    {filteredFolders.map((folder) => (\n                        <FolderCard\n                            key={folder.title}\n                            folder={folder}\n                            onView={handleViewFolder}\n                            onTagClick={handleTagClick}\n                            onTagManage={openTagDialog}\n                            onRandomPhoto={openRandomPhotos}\n                            onDelete={openDeleteDialog}\n                        />\n                    ))}\n                </div>\n\n                {/* Loading indicator and intersection observer target */}\n                {hasMore && (\n                    <div\n                        ref={loadMoreRef}\n                        className=\"flex justify-center items-center py-8 mb-16\" // Added mb-16 for better mobile spacing\n                    >\n                        {loading && (\n                            <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n                        )}\n                    </div>\n                )}\n            </div>\n\n            {/* Mobile Navigation with fixed positioning and z-index */}\n            {isMobile && (\n                <div className=\"z-50 fixed bottom-0 left-0 right-0 bg-white shadow-t-lg\">\n                    <MobileNavigation\n                        onHomeClick={() => {\n                            navigate('/')\n                            setSelectedRoot('')\n                            setSearchQuery('')\n                        }}\n                        onRootClick={() => setIsMenuOpen(true)} // Use React state instead of DOM manipulation\n                        onTagsClick={() => setIsMenuOpen(true)} // Use React state instead of DOM manipulation\n                        onIndexClick={startIndexation}\n                        onApiDocsClick={handleApiDocsClick}\n                        isIndexing={isIndexing}\n                    />\n                </div>\n            )}\n\n            {/* Dialogs */}\n            {tagDialogOpen && selectedFolder && (\n                <TagDialog\n                    folder={selectedFolder}\n                    onCancel={closeTagDialog}\n                    onSave={closeTagDialog}\n                />\n            )}\n\n            {deleteDialogOpen && folderToDelete && (\n                <DeleteDialog\n                    folder={folderToDelete}\n                    onCancel={closeDeleteDialog}\n                    onConfirm={handleDeleteConfirm}\n                />\n            )}\n\n            {randomPhotoDialogOpen && randomPhotos && (\n                <RandomPhotoView photos={randomPhotos} />\n            )}\n        </div>\n    )\n}\n\nexport default FolderList\n","import React, { useEffect, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport PhotoSwipeGallery from '../components/PhotoSwipeGallery'\nimport MenuSection from '../components/MenuSection'\nimport MobileNavigation from '../components/MobileNavigation'\nimport { Folder, JsonFilePhoto } from '../types/gallery'\nimport { api } from '../services/api'\nimport { useFolders } from '../hooks/useFolders'\nimport useMobile from '../hooks/useMobile'\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll'\n\nconst FolderDetail: React.FC = () => {\n    const [photos, setPhotos] = useState<JsonFilePhoto[]>([])\n    const [page, setPage] = useState<number>(1)\n    const [showEverything, setShowEverything] = useState<boolean>(false)\n    const [hasMore, setHasMore] = useState<boolean>(true)\n    const [loading, setLoading] = useState<boolean>(true)\n    const [sFolder, setFolder] = useState<Folder | null>(null)\n    const { folderName } = useParams<{ folderName: string }>()\n    const navigate = useNavigate()\n    const isMobile = useMobile()\n    const { isIndexing, startIndexation } = useFolders()\n    const perPage = 200 // Reduced from 200 to improve initial load time\n\n    // Load more photos function for infinite scroll\n    const loadMorePhotos = async () => {\n        if (!folderName || !hasMore || loading) return\n\n        setLoading(true)\n        try {\n            const data = await api.photos.getAllByFolder(\n                folderName,\n                perPage,\n                page\n            )\n\n            // If we got fewer items than perPage, or no items, there are no more photos\n            if (!data.items.length || data.items.length < perPage) {\n                setHasMore(false)\n            }\n\n            // Append new photos to existing ones\n            setPhotos((prevPhotos) => [...prevPhotos, ...data.items])\n            setPage((prevPage) => prevPage + 1)\n        } catch (err) {\n            console.error('Failed to fetch more photos:', err)\n            setHasMore(false)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    // Infinite scroll hook\n    const loadMoreRef = useInfiniteScroll({\n        onLoadMore: loadMorePhotos,\n        hasMore,\n        loading,\n    })\n\n    // First effect: Fetch folder details\n    useEffect(() => {\n        if (!folderName) return\n\n        setLoading(true)\n        setPhotos([]) // Reset photos when folder changes\n        setPage(1) // Reset page\n        setHasMore(true) // Reset hasMore\n\n        api.folders\n            .getByName(folderName)\n            .then(async (folder) => {\n                if (folder) {\n                    folder.tags = await api.tags.getAll(folder.title)\n                    setFolder(folder)\n                }\n            })\n            .catch((err) =>\n                console.error('Failed to fetch folder details:', err)\n            )\n            .finally(() => setLoading(false))\n    }, [folderName])\n\n    // Second effect: Initial photos fetch\n    useEffect(() => {\n        if (!folderName) return\n\n        loadMorePhotos() // Initial load of photos\n    }, [folderName]) // Only run on folder change\n\n    const handleBack = () => {\n        if (sFolder?.root) {\n            navigate(`/?root=${sFolder.root}`)\n        } else {\n            navigate('/')\n        }\n    }\n\n    const handleTagClick = (type: 'tag' | 'root', value: string) => {\n        if (type === 'tag') {\n            navigate(`/tag/${value}`)\n        } else if (type === 'root') {\n            navigate('/', { state: { selectedRoot: value } })\n        }\n    }\n\n    const handleApiDocsClick = () => {\n        navigate('/api-docs')\n    }\n\n    if (!photos.length && loading) {\n        return (\n            <div className=\"flex justify-center items-center h-64\">\n                Loading photos...\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 mobile-safe-bottom\">\n            <div className=\"container mx-auto p-4\">\n                <MenuSection\n                    onTagClick={handleTagClick}\n                    onApiDocsClick={handleApiDocsClick}\n                />\n\n                <div className=\"container mx-auto p-4\">\n                    <div className=\"flex items-center mb-6\">\n                        <button\n                            onClick={handleBack}\n                            className=\"mr-4 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition\"\n                        >\n                            Back\n                        </button>\n                        <button\n                            onClick={() => {\n                                setShowEverything(!showEverything)\n                            }}\n                            className=\"mr-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-gray-300 transition\"\n                        >\n                            Show everything\n                        </button>\n                        <h1 className=\"text-3xl font-bold\">\n                            {sFolder?.title || 'Album'}\n                        </h1>\n                        {sFolder?.root && (\n                            <span\n                                className=\"ml-4 px-3 py-1 bg-blue-500 text-white text-sm rounded-full cursor-pointer hover:bg-blue-600\"\n                                onClick={() =>\n                                    handleTagClick('root', sFolder.root)\n                                }\n                            >\n                                {sFolder.root}\n                            </span>\n                        )}\n                    </div>\n\n                    <PhotoSwipeGallery images={photos} />\n\n                    {/* Infinite scroll sentinel */}\n                    {hasMore && (\n                        <div\n                            ref={loadMoreRef}\n                            className=\"flex justify-center items-center py-8\"\n                        >\n                            {loading && (\n                                <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {isMobile && (\n                <MobileNavigation\n                    onHomeClick={handleBack}\n                    onRootClick={() => {\n                        navigate('/', { state: { showRoots: true } })\n                    }}\n                    onTagsClick={() => {\n                        navigate('/')\n                    }}\n                    onIndexClick={startIndexation}\n                    onApiDocsClick={handleApiDocsClick}\n                    isIndexing={isIndexing}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default FolderDetail\n","// src-ui/src/pages/TagView.tsx\nimport React, { useEffect, useState } from 'react'\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\nimport MenuSection from '../components/MenuSection'\nimport MobileNavigation from '../components/MobileNavigation'\nimport { Folder, JsonFilePhoto, Photo } from '../types/gallery'\nimport { api } from '../services/api'\nimport { useFolders } from '../hooks/useFolders'\nimport useMobile from '../hooks/useMobile'\nimport PhotoSwipeGallery from '../components/PhotoSwipeGallery'\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll'\n\nconst TagView: React.FC = () => {\n    const { tagName } = useParams<{ tagName: string }>()\n    const [photos, setPhotos] = useState<JsonFilePhoto[]>([])\n    // const [page, setPage] = useState<number>(1)\n    const [showEverything, setShowEverything] = useState<boolean>(false)\n    const [hasMore, setHasMore] = useState<boolean>(true)\n    const [loading, setLoading] = useState<boolean>(true)\n    const [sFolder, setFolder] = useState<Folder | null>(null)\n    // const { folderName } = useParams<{ folderName: string }>()\n    const navigate = useNavigate()\n\n    // Load more photos function for infinite scroll\n    const loadMorePhotos = async () => {\n        if (!tagName || !hasMore || loading) return\n\n        setLoading(true)\n        try {\n            const data = await api.photos.getRandomByTag(tagName, 300, true)\n\n            // If we got fewer items than perPage, or no items, there are no more photos\n            if (data.items.length === 0) {\n                setHasMore(false)\n            }\n\n            // Append new photos to existing ones\n            setPhotos((prevPhotos) => [...prevPhotos, ...data.items])\n            // setPage((prevPage) => prevPage + 1)\n        } catch (err) {\n            console.error('Failed to fetch more photos:', err)\n            setHasMore(false)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    // Infinite scroll hook\n    const loadMoreRef = useInfiniteScroll({\n        onLoadMore: loadMorePhotos,\n        hasMore,\n        loading,\n    })\n\n    // First effect: Fetch folder details\n    // useEffect(() => {\n    //     if (!folderName) return\n    //\n    //     setLoading(true)\n    //     setPhotos([]) // Reset photos when folder changes\n    //     setPage(1) // Reset page\n    //     setHasMore(true) // Reset hasMore\n    //\n    //     api.folders\n    //         .getByName(folderName)\n    //         .then(async (folder) => {\n    //             if (folder) {\n    //                 folder.tags = await api.tags.getAll(folder.title)\n    //                 setFolder(folder)\n    //             }\n    //         })\n    //         .catch((err) =>\n    //             console.error('Failed to fetch folder details:', err)\n    //         )\n    //         .finally(() => setLoading(false))\n    // }, [folderName])\n\n    // Second effect: Initial photos fetch\n    useEffect(() => {\n        if (!tagName) return\n\n        loadMorePhotos() // Initial load of photos\n    }, [tagName]) // Only run on folder change\n\n    const handleBack = () => {\n        if (sFolder?.root) {\n            navigate(`/?root=${sFolder.root}`)\n        } else {\n            navigate('/')\n        }\n    }\n\n    const handleTagClick = (type: 'tag' | 'root', value: string) => {\n        if (type === 'tag') {\n            navigate(`/tag/${value}`)\n        } else if (type === 'root') {\n            navigate('/', { state: { selectedRoot: value } })\n        }\n    }\n\n    const handleApiDocsClick = () => {\n        navigate('/api-docs')\n    }\n\n    if (!photos.length && loading) {\n        return (\n            <div className=\"flex justify-center items-center h-64\">\n                Loading photos...\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 mobile-safe-bottom\">\n            <div className=\"container mx-auto p-4\">\n                <MenuSection\n                    onTagClick={handleTagClick}\n                    onApiDocsClick={handleApiDocsClick}\n                />\n\n                <div className=\"container mx-auto p-4\">\n                    <div className=\"flex items-center mb-6\">\n                        <button\n                            onClick={handleBack}\n                            className=\"mr-4 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition\"\n                        >\n                            Back\n                        </button>\n                        <button\n                            onClick={() => {\n                                setShowEverything(!showEverything)\n                            }}\n                            className=\"mr-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-gray-300 transition\"\n                        >\n                            Show everything\n                        </button>\n                        <h1 className=\"text-3xl font-bold\">\n                            {sFolder?.title || 'Album'}\n                        </h1>\n                        {sFolder?.root && (\n                            <span\n                                className=\"ml-4 px-3 py-1 bg-blue-500 text-white text-sm rounded-full cursor-pointer hover:bg-blue-600\"\n                                onClick={() =>\n                                    handleTagClick('root', sFolder.root)\n                                }\n                            >\n                                {sFolder.root}\n                            </span>\n                        )}\n                    </div>\n\n                    <PhotoSwipeGallery images={photos} />\n\n                    {/* Infinite scroll sentinel */}\n                    {hasMore && (\n                        <div\n                            ref={loadMoreRef}\n                            className=\"flex justify-center items-center py-8\"\n                        >\n                            {loading && (\n                                <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TagView\n","import React, { FC, useEffect, useState } from 'react'\nimport SwaggerUI from 'swagger-ui-react'\nimport 'swagger-ui-react/swagger-ui.css'\nimport axios from 'axios'\nimport { AlertTriangle, ArrowLeft, RefreshCw } from 'lucide-react'\n\ninterface ApiDocsProps {\n    specUrl: string\n    onBack?: () => void\n}\n\nconst ApiDocs: FC<ApiDocsProps> = ({ specUrl, onBack }) => {\n    const [spec, setSpec] = useState<object | null>(null)\n    const [loading, setLoading] = useState<boolean>(true)\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        const fetchSwaggerSpec = async () => {\n            setLoading(true)\n            setError(null)\n\n            try {\n                const response = await axios.get(specUrl)\n                setSpec(response.data)\n                setLoading(false)\n            } catch (err) {\n                console.error('Error fetching OpenAPI spec:', err)\n                setError(\n                    'Failed to load API documentation. Please try again later.'\n                )\n                setLoading(false)\n            }\n        }\n\n        fetchSwaggerSpec()\n    }, [specUrl])\n\n    return (\n        <div className=\"swagger-container bg-white rounded-lg shadow-md p-4 overflow-hidden\">\n            {onBack && (\n                <button\n                    onClick={onBack}\n                    className=\"mb-4 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition flex items-center\"\n                >\n                    <ArrowLeft size={16} className=\"mr-2\" /> Back to Albums\n                </button>\n            )}\n\n            <h1 className=\"text-2xl font-bold mb-4\">API Documentation</h1>\n\n            {loading && (\n                <div className=\"flex items-center justify-center h-64\">\n                    <RefreshCw\n                        size={32}\n                        className=\"animate-spin text-blue-500\"\n                    />\n                    <span className=\"ml-2 text-lg\">\n                        Loading API documentation...\n                    </span>\n                </div>\n            )}\n\n            {error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-md p-4 flex items-start\">\n                    <AlertTriangle\n                        size={20}\n                        className=\"text-red-500 mt-0.5 mr-3 flex-shrink-0\"\n                    />\n                    <div>\n                        <h3 className=\"text-red-800 font-medium\">\n                            Error Loading Documentation\n                        </h3>\n                        <p className=\"text-red-700 mt-1\">{error}</p>\n                        <button\n                            onClick={() => window.location.reload()}\n                            className=\"mt-3 px-4 py-1.5 bg-red-100 text-red-800 rounded hover:bg-red-200 transition\"\n                        >\n                            Retry\n                        </button>\n                    </div>\n                </div>\n            )}\n\n            {!loading && !error && spec && (\n                <div className=\"swagger-ui-wrapper overflow-auto\">\n                    <SwaggerUI spec={spec} docExpansion=\"list\" filter={true} />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default ApiDocs\n","// src-ui/src/pages/ApiDocs.tsx\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport ApiDocsComponent from '../components/ApiDocs'\nimport MobileNavigation from '../components/MobileNavigation'\nimport { useFolders } from '../hooks/useFolders'\nimport useMobile from '../hooks/useMobile'\n\nconst ApiDocs: React.FC = () => {\n    const navigate = useNavigate()\n    const isMobile = useMobile()\n    const { isIndexing, startIndexation } = useFolders()\n\n    // API Documentation URL\n    const apiDocsUrl = 'http://192.168.1.27:8000/openapi.json'\n\n    const handleBack = () => {\n        navigate('/')\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 mobile-safe-bottom\">\n            <div className=\"container mx-auto p-4\">\n                <ApiDocsComponent specUrl={apiDocsUrl} onBack={handleBack} />\n            </div>\n\n            {isMobile && (\n                <MobileNavigation\n                    onHomeClick={handleBack}\n                    onRootClick={() => {\n                        navigate('/', { state: { showRoots: true } })\n                    }}\n                    onTagsClick={() => {\n                        navigate('/')\n                    }}\n                    onIndexClick={startIndexation}\n                    onApiDocsClick={() => {}}\n                    isIndexing={isIndexing}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ApiDocs\n","import React from 'react'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport FolderList from './pages/FolderList'\nimport FolderDetail from './pages/FolderDetail'\nimport TagView from './pages/TagView'\nimport ApiDocs from './pages/ApiDocs'\n\nconst Router: React.FC = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<FolderList />} />\n            <Route path=\"/folder/:folderName\" element={<FolderDetail />} />\n            <Route path=\"/tag/:tagName\" element={<TagView />} />\n            <Route path=\"/api-docs\" element={<ApiDocs />} />\n            <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n        </Routes>\n    )\n}\n\nexport default Router\n","import React from 'react'\nimport Router from './Router'\nimport { FolderProvider } from './context/FolderContext'\nimport { UIProvider } from './context/UIContext'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <FolderProvider>\n                <UIProvider>\n                    <Router />\n                </UIProvider>\n            </FolderProvider>\n        </BrowserRouter>\n    )\n}\nexport default App\n","import { onCLS, onFID, onLCP, onFCP, onTTFB } from 'web-vitals'\n\nfunction reportWebVitals(onPerfEntry: any) {\n    if (onPerfEntry && typeof onPerfEntry === 'function') {\n        onCLS(onPerfEntry) // Measures visual stability\n        onFID(onPerfEntry) // Measures interactivity\n        onLCP(onPerfEntry) // Measures loading performance\n        onFCP(onPerfEntry) // Measures time to first content display\n        onTTFB(onPerfEntry) // Measures server response time\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './style/index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkphoto_album_portal\"] = self[\"webpackChunkphoto_album_portal\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [967,980,173,96], () => (__webpack_require__(74305)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["sanitize","value","DOMPurify","name","replace","arr","map","item","params","sanitizedParams","key","undefined","apiClient","axios","create","baseURL","headers","timeout","interceptors","response","use","error","_error$config","_error$config2","_error$response","console","url","config","method","status","message","Promise","reject","Error","code","navigator","onLine","api","getRoots","async","get","data","getAll","page","arguments","length","perPage","root","searchBy","sanitizedRoot","sanitizedSearchBy","per_page","searchby","getByName","sanitizedName","folderName","delete","post","folder_name","rows","updateTags","tags","sanitizedTags","getAllByFolder","folder","getRandomByTag","tag","size","equal","getRandomByFolder","imageHash","sanitizedHash","image_hash","indexPhotos","cancelIndexTask","FolderContext","createContext","FolderProvider","_ref","children","folders","setFolders","useState","roots","setFolderRoots","setTags","filteredFolders","setFilteredFolders","loading","setLoading","searchQuery","setSearchQuery","selectedRoot","setSelectedRoot","isIndexing","setIsIndexing","setPage","hasMore","setHasMore","checkIntervalRef","useRef","location","useLocation","navigate","useNavigate","updateSearchParams","useCallback","query","search","getUpdatedSearchParams","URLSearchParams","set","toString","newUrl","pathname","checkIndexationStatus","task_running","current","clearInterval","refreshFolders","err","useEffect","fetchFolders","currentPage","hasMoreFolders","newFolders","loadMoreFolders","nextPage","prev","rootParam","searchParam","fetchRoots","fetchTags","updateFolderTags","folderTitle","result","prevFolders","title","deleteFolder","filter","startIndexation","setInterval","r","setTimeout","cancelIndexation","handleSetSearchQuery","handleSetSelectedRoot","_jsx","Provider","useFolders","useContext","generateImageKey","thumbnail","width","height","generateThumbnailUrl","cacheImageUrl","cacheJson","localStorage","getItem","cache","JSON","parse","timestamp","Date","now","cleanupCache","setItem","stringify","getCachedImageUrl","cachedImage","preloadImage","resolve","img","Image","onload","onerror","src","keys","Object","sort","a","b","slice","forEach","getCacheStats","oldestEntry","newestEntry","timestamps","Math","min","max","useImageCache","stats","setStats","handleStorageChange","e","window","addEventListener","removeEventListener","getImageUrl","cachedUrl","cacheImage","preload","clearCache","removeItem","preloadBatch","thumbnails","i","batch","all","onClose","cachedItems","setCachedItems","items","parts","split","parseInt","push","sorted","formatDate","toLocaleString","className","_jsxs","totalBytes","toFixed","formatCacheSize","alt","onClick","confirm","breakpoint","isMobile","setIsMobile","innerWidth","handleResize","MenuSection","onTagClick","onApiDocsClick","isOpen","menuOpen","setMenuOpen","showCacheManager","setShowCacheManager","useMobile","totalPhotos","reduce","total","photo_count","allTags","handleRootClick","rootName","log","handleMenuToggle","newState","Info","disabled","_Fragment","RefreshCw","hidden","handleApiDocsClick","FileText","toggleCacheManager","Database","Search","type","onChange","target","placeholder","X","FolderOpen","Tag","handleTagClick","state","CacheManager","React","currentIndex","setCurrentIndex","loadedImages","setLoadedImages","isTouching","setIsTouching","touchStartX","setTouchStartX","isThumbnail","interval","prevIndex","nextIndex","preloadNextImages","isImageLoaded","index","onTouchStart","touches","clientX","onTouchMove","onTouchEnd","touchEndX","changedTouches","diffX","abs","regularUrl","thumbnailUrl","srcSet","onLoad","handleImageLoad","_","onView","onTagManage","onRandomPhoto","onDelete","ThumbnailSlideshow","stopPropagation","Trash2","Camera","Play","onHomeClick","onRootClick","onTagsClick","onIndexClick","toggleMenu","Menu","Home","DeleteDialog","onCancel","onConfirm","TagDialog","onSave","localFolder","setlocalFolder","toggleTag","_updatedFolder$tags","updatedFolder","includes","t","GalleryContent","images","openNow","open","close","useGallery","photoId","timer","clearTimeout","image","Item","original","hash","filename","extention","caption","_ref2","ref","fetchPriority","_ref3","Gallery","withCaption","withDownloadButton","options","bgOpacity","loop","pinchToClose","closeOnVerticalDrag","UIContext","UIProvider","tagDialogOpen","setTagDialogOpen","deleteDialogOpen","setDeleteDialogOpen","randomPhotoDialogOpen","setRandomPhotoDialogOpen","selectedFolder","setSelectedFolder","folderToDelete","setFolderToDelete","randomPhotos","setRandomPhotos","openTagDialog","closeTagDialog","openDeleteDialog","closeDeleteDialog","openRandomPhotos","photos","closeRandomPhotos","useUI","onOpen","pswpInstance","on","useInfiniteScroll","onLoadMore","observerRef","loadMoreRef","node","disconnect","IntersectionObserver","entries","isIntersecting","observe","FolderList","isMenuOpen","setIsMenuOpen","searchParams","setSearchParams","useSearchParams","updateRootInUrl","updateSearchInUrl","handleViewFolder","FolderCard","MobileNavigation","RandomPhotoView","FolderDetail","setPhotos","showEverything","setShowEverything","sFolder","setFolder","useParams","loadMorePhotos","prevPhotos","prevPage","then","catch","finally","handleBack","PhotoSwipeGallery","showRoots","TagView","tagName","specUrl","onBack","spec","setSpec","setError","fetchSwaggerSpec","ArrowLeft","AlertTriangle","reload","SwaggerUI","docExpansion","ApiDocs","ApiDocsComponent","Router","Routes","Route","path","element","Navigate","to","App","BrowserRouter","onPerfEntry","onCLS","onFID","onLCP","onFCP","onTTFB","ReactDOM","document","getElementById","render","reportWebVitals","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","id","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","n","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","mode","this","ns","def","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","g","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}